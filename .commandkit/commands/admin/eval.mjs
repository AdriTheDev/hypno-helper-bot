import "../../chunk-LJIZ45IO.mjs";
import {
  __name
} from "../../chunk-G5GHKT7C.mjs";

// src/commands/admin/eval.ts
import { ApplicationCommandOptionType, EmbedBuilder } from "discord.js";
var data = {
  name: "eval",
  description: "Evaluates the code provided",
  dm_permission: false,
  options: [
    {
      name: "code",
      description: "the code to run",
      type: ApplicationCommandOptionType.String,
      required: true
    },
    {
      name: "hide-reply",
      description: "hide reply?",
      type: ApplicationCommandOptionType.Boolean,
      required: false
    }
  ]
};
async function run({ interaction, client, handler }) {
  const code = interaction.options.getString("code");
  const hideReply = interaction.options.getBoolean("hide-reply");
  if (!code)
    return interaction.reply({ content: "Please provide code to run", ephemeral: true });
  if (code.length > 2e3)
    return interaction.reply({ content: "Code must be less than 2000 characters", ephemeral: true });
  if (hideReply) {
    try {
      const evaled = await eval(code);
      const embed = new EmbedBuilder().setTitle("Evaluated Code").addFields(
        {
          name: "Input",
          value: `\`\`\`js
${code}
\`\`\``
        },
        {
          name: "Output",
          value: `\`\`\`js
${evaled}
\`\`\``
        }
      ).setColor(7855479).setTimestamp();
      interaction.reply({ embeds: [embed], ephemeral: true });
    } catch (e) {
      const embed2 = new EmbedBuilder().setTitle("Evaluated Code").addFields(
        {
          name: "Input",
          value: `\`\`\`js
${code}
\`\`\``
        },
        {
          name: "Output",
          value: `\`\`\`js
${e}
\`\`\``
        }
      ).setColor(16738657).setTimestamp();
      interaction.reply({ embeds: [embed2], ephemeral: true });
    }
  } else {
    try {
      const evaled = await eval(code);
      const embed = new EmbedBuilder().setTitle("Evaluated Code").addFields(
        {
          name: "Input",
          value: `\`\`\`js
${code}
\`\`\``
        },
        {
          name: "Output",
          value: `\`\`\`js
${evaled}
\`\`\``
        }
      ).setColor(7855479).setTimestamp();
      interaction.reply({ embeds: [embed] });
    } catch (e) {
      const embed2 = new EmbedBuilder().setTitle("Evaluated Code").addFields(
        {
          name: "Input",
          value: `\`\`\`js
${code}
\`\`\``
        },
        {
          name: "Output",
          value: `\`\`\`js
${e}
\`\`\``
        }
      ).setColor(16738657).setTimestamp();
      interaction.reply({ embeds: [embed2] });
    }
  }
}
__name(run, "run");
var options = {
  userPermissions: "Administrator"
};
export {
  data,
  options,
  run
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsiLi4vLi4vLi4vc3JjL2NvbW1hbmRzL2FkbWluL2V2YWwudHMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbImltcG9ydCB0eXBlIHsgQ29tbWFuZERhdGEsIENvbW1hbmRPcHRpb25zLCBTbGFzaENvbW1hbmRQcm9wcyB9IGZyb20gJ2NvbW1hbmRraXQnO1xuaW1wb3J0IHsgQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZSwgQ2hhbm5lbFR5cGUsIEVtYmVkQnVpbGRlciwgR3VpbGRUZXh0QmFzZWRDaGFubmVsIH0gZnJvbSAnZGlzY29yZC5qcyc7XG5cbmV4cG9ydCBjb25zdCBkYXRhOiBDb21tYW5kRGF0YSA9IHtcbiAgbmFtZTogJ2V2YWwnLFxuICBkZXNjcmlwdGlvbjogJ0V2YWx1YXRlcyB0aGUgY29kZSBwcm92aWRlZCcsXG4gIGRtX3Blcm1pc3Npb246IGZhbHNlLFxuICBvcHRpb25zOiBbXG4gICAge1xuICAgICAgbmFtZTogJ2NvZGUnLFxuICAgICAgZGVzY3JpcHRpb246ICd0aGUgY29kZSB0byBydW4nLFxuICAgICAgdHlwZTogQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZS5TdHJpbmcsXG4gICAgICByZXF1aXJlZDogdHJ1ZSxcbiAgICB9LFxuICAgIHtcbiAgICAgIG5hbWU6ICdoaWRlLXJlcGx5JyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnaGlkZSByZXBseT8nLFxuICAgICAgdHlwZTogQXBwbGljYXRpb25Db21tYW5kT3B0aW9uVHlwZS5Cb29sZWFuLFxuICAgICAgcmVxdWlyZWQ6IGZhbHNlLFxuICAgIH0sXG4gIF0sXG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuKHsgaW50ZXJhY3Rpb24sIGNsaWVudCwgaGFuZGxlciB9OiBTbGFzaENvbW1hbmRQcm9wcykge1xuICBjb25zdCBjb2RlID0gaW50ZXJhY3Rpb24ub3B0aW9ucy5nZXRTdHJpbmcoJ2NvZGUnKTtcbiAgY29uc3QgaGlkZVJlcGx5ID0gaW50ZXJhY3Rpb24ub3B0aW9ucy5nZXRCb29sZWFuKCdoaWRlLXJlcGx5Jyk7XG5cbiAgaWYgKCFjb2RlKSByZXR1cm4gaW50ZXJhY3Rpb24ucmVwbHkoeyBjb250ZW50OiAnUGxlYXNlIHByb3ZpZGUgY29kZSB0byBydW4nLCBlcGhlbWVyYWw6IHRydWUgfSk7XG4gIGlmIChjb2RlLmxlbmd0aCA+IDIwMDApIHJldHVybiBpbnRlcmFjdGlvbi5yZXBseSh7IGNvbnRlbnQ6ICdDb2RlIG11c3QgYmUgbGVzcyB0aGFuIDIwMDAgY2hhcmFjdGVycycsIGVwaGVtZXJhbDogdHJ1ZSB9KTtcblxuICBpZiAoaGlkZVJlcGx5KSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGV2YWxlZCA9IGF3YWl0IGV2YWwoY29kZSk7XG4gICAgICBjb25zdCBlbWJlZCA9IG5ldyBFbWJlZEJ1aWxkZXIoKVxuICAgICAgICAuc2V0VGl0bGUoJ0V2YWx1YXRlZCBDb2RlJylcbiAgICAgICAgLmFkZEZpZWxkcyhcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnSW5wdXQnLFxuICAgICAgICAgICAgdmFsdWU6IGBcXGBcXGBcXGBqc1xcbiR7Y29kZX1cXG5cXGBcXGBcXGBgLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ091dHB1dCcsXG4gICAgICAgICAgICB2YWx1ZTogYFxcYFxcYFxcYGpzXFxuJHtldmFsZWR9XFxuXFxgXFxgXFxgYCxcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgLnNldENvbG9yKDB4NzdkZDc3KVxuICAgICAgICAuc2V0VGltZXN0YW1wKCk7XG5cbiAgICAgIGludGVyYWN0aW9uLnJlcGx5KHsgZW1iZWRzOiBbZW1iZWRdLCBlcGhlbWVyYWw6IHRydWUgfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgY29uc3QgZW1iZWQgPSBuZXcgRW1iZWRCdWlsZGVyKClcbiAgICAgICAgLnNldFRpdGxlKCdFdmFsdWF0ZWQgQ29kZScpXG4gICAgICAgIC5hZGRGaWVsZHMoXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ0lucHV0JyxcbiAgICAgICAgICAgIHZhbHVlOiBgXFxgXFxgXFxganNcXG4ke2NvZGV9XFxuXFxgXFxgXFxgYCxcbiAgICAgICAgICB9LFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdPdXRwdXQnLFxuICAgICAgICAgICAgdmFsdWU6IGBcXGBcXGBcXGBqc1xcbiR7ZX1cXG5cXGBcXGBcXGBgLFxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICAuc2V0Q29sb3IoMHhmZjY5NjEpXG4gICAgICAgIC5zZXRUaW1lc3RhbXAoKTtcblxuICAgICAgaW50ZXJhY3Rpb24ucmVwbHkoeyBlbWJlZHM6IFtlbWJlZF0sIGVwaGVtZXJhbDogdHJ1ZSB9KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGV2YWxlZCA9IGF3YWl0IGV2YWwoY29kZSk7XG4gICAgICBjb25zdCBlbWJlZCA9IG5ldyBFbWJlZEJ1aWxkZXIoKVxuICAgICAgICAuc2V0VGl0bGUoJ0V2YWx1YXRlZCBDb2RlJylcbiAgICAgICAgLmFkZEZpZWxkcyhcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnSW5wdXQnLFxuICAgICAgICAgICAgdmFsdWU6IGBcXGBcXGBcXGBqc1xcbiR7Y29kZX1cXG5cXGBcXGBcXGBgLFxuICAgICAgICAgIH0sXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ091dHB1dCcsXG4gICAgICAgICAgICB2YWx1ZTogYFxcYFxcYFxcYGpzXFxuJHtldmFsZWR9XFxuXFxgXFxgXFxgYCxcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgLnNldENvbG9yKDB4NzdkZDc3KVxuICAgICAgICAuc2V0VGltZXN0YW1wKCk7XG5cbiAgICAgIGludGVyYWN0aW9uLnJlcGx5KHsgZW1iZWRzOiBbZW1iZWRdIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnN0IGVtYmVkID0gbmV3IEVtYmVkQnVpbGRlcigpXG4gICAgICAgIC5zZXRUaXRsZSgnRXZhbHVhdGVkIENvZGUnKVxuICAgICAgICAuYWRkRmllbGRzKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIG5hbWU6ICdJbnB1dCcsXG4gICAgICAgICAgICB2YWx1ZTogYFxcYFxcYFxcYGpzXFxuJHtjb2RlfVxcblxcYFxcYFxcYGAsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnT3V0cHV0JyxcbiAgICAgICAgICAgIHZhbHVlOiBgXFxgXFxgXFxganNcXG4ke2V9XFxuXFxgXFxgXFxgYCxcbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICAgLnNldENvbG9yKDB4ZmY2OTYxKVxuICAgICAgICAuc2V0VGltZXN0YW1wKCk7XG5cbiAgICAgIGludGVyYWN0aW9uLnJlcGx5KHsgZW1iZWRzOiBbZW1iZWRdIH0pO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY29uc3Qgb3B0aW9uczogQ29tbWFuZE9wdGlvbnMgPSB7XG4gIHVzZXJQZXJtaXNzaW9uczogJ0FkbWluaXN0cmF0b3InLFxufTtcbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7OztBQUNBLFNBQVMsOEJBQTJDLG9CQUEyQztBQUV4RixJQUFNLE9BQW9CO0FBQUEsRUFDL0IsTUFBTTtBQUFBLEVBQ04sYUFBYTtBQUFBLEVBQ2IsZUFBZTtBQUFBLEVBQ2YsU0FBUztBQUFBLElBQ1A7QUFBQSxNQUNFLE1BQU07QUFBQSxNQUNOLGFBQWE7QUFBQSxNQUNiLE1BQU0sNkJBQTZCO0FBQUEsTUFDbkMsVUFBVTtBQUFBLElBQ1o7QUFBQSxJQUNBO0FBQUEsTUFDRSxNQUFNO0FBQUEsTUFDTixhQUFhO0FBQUEsTUFDYixNQUFNLDZCQUE2QjtBQUFBLE1BQ25DLFVBQVU7QUFBQSxJQUNaO0FBQUEsRUFDRjtBQUNGO0FBRUEsZUFBc0IsSUFBSSxFQUFFLGFBQWEsUUFBUSxRQUFRLEdBQXNCO0FBQzdFLFFB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